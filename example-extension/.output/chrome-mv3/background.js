var background=(function(){"use strict";var w,b;function k(e){return e==null||typeof e=="function"?{main:e}:e}const m=(b=(w=globalThis.browser)==null?void 0:w.runtime)!=null&&b.id?globalThis.browser:globalThis.chrome;(function(){var a;const e=console.log,l=console.error,r=console.warn,c=console.info,i=console.debug;let n="unknown";typeof ServiceWorkerGlobalScope<"u"&&self instanceof ServiceWorkerGlobalScope?n="background:service-worker":typeof WorkerGlobalScope<"u"&&self instanceof WorkerGlobalScope?n="worker":typeof window<"u"&&(((a=window.location)==null?void 0:a.protocol)==="chrome-extension:"?n="popup:main-world":(document==null?void 0:document.readyState)!==void 0?n="content:main-world":n="inpage:main-world");function t(o,d){const f=new Date().toISOString(),p={level:o,message:d.map(s=>typeof s=="object"?JSON.stringify(s,null,2):String(s)).join(" "),context:n,timestamp:f};fetch("http://localhost:3001/api/debug/client-logs",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(p)}).catch(()=>{})}console.log=function(...o){return t("log",o),e.apply(console,o)},console.error=function(...o){return t("error",o),l.apply(console,o)},console.warn=function(...o){return t("warn",o),r.apply(console,o)},console.info=function(...o){return t("info",o),c.apply(console,o)},console.debug=function(...o){return t("debug",o),i.apply(console,o)}})();const y=k({main(){console.log("[Background] Service worker started"),console.info("[Background] Extension version:",m.runtime.getManifest().version),setTimeout(()=>{console.log("[Background] Basic logging test"),console.warn("[Background] This is a warning message"),console.error("[Background] This is an error message"),console.info("[Background] This is an info message"),console.debug("[Background] This is a debug message")},1e3),setTimeout(()=>{console.log("[Background] Test object:",{name:"Test Object",nested:{value:42,array:[1,2,3,"test"]},timestamp:new Date}),console.log("[Background] Test array:",[1,2,3,{key:"value"}])},2e3),setTimeout(()=>{try{throw new Error("Test background error with stack trace")}catch(r){console.error("[Background] Caught error:",r)}},3e3),setTimeout(()=>{Promise.reject(new Error("Background promise rejection test")).catch(()=>{})},4e3),setTimeout(()=>{Promise.reject("Unhandled background promise rejection")},5e3),setTimeout(()=>{const r=performance.now();let c=0;for(let n=0;n<1e5;n++)c+=n;const i=performance.now();console.log(`[Background] Performance test completed in ${i-r}ms. Result: ${c}`)},6e3);let e=0;const l=setInterval(()=>{e++,console.log(`[Background] Periodic log #${e} at ${new Date().toISOString()}`),e>=5&&(clearInterval(l),console.log("[Background] Periodic logging completed"))},2e3);m.runtime.onMessage.addListener((r,c,i)=>{var n;console.log("[Background] Received message:",r,"from:",(n=c.tab)==null?void 0:n.url),r.type==="test-response"&&i({success:!0,timestamp:Date.now(),backgroundCounter:e})}),console.log("[Background] Background script initialization complete")}});function T(){}(function(){var a;const e=console.log,l=console.error,r=console.warn,c=console.info,i=console.debug;let n="unknown";typeof ServiceWorkerGlobalScope<"u"&&self instanceof ServiceWorkerGlobalScope?n="background:service-worker":typeof WorkerGlobalScope<"u"&&self instanceof WorkerGlobalScope?n="worker":typeof window<"u"&&(((a=window.location)==null?void 0:a.protocol)==="chrome-extension:"?n="popup:main-world":(document==null?void 0:document.readyState)!==void 0?n="content:main-world":n="inpage:main-world");function t(o,d){const f=new Date().toISOString(),p={level:o,message:d.map(s=>typeof s=="object"?JSON.stringify(s,null,2):String(s)).join(" "),context:n,timestamp:f};fetch("http://localhost:3001/api/debug/client-logs",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(p)}).catch(()=>{})}console.log=function(...o){return t("log",o),e.apply(console,o)},console.error=function(...o){return t("error",o),l.apply(console,o)},console.warn=function(...o){return t("warn",o),r.apply(console,o)},console.info=function(...o){return t("info",o),c.apply(console,o)},console.debug=function(...o){return t("debug",o),i.apply(console,o)}})();function u(e,...l){}const h={debug:(...e)=>u(console.debug,...e),log:(...e)=>u(console.log,...e),warn:(...e)=>u(console.warn,...e),error:(...e)=>u(console.error,...e)};let g;try{g=y.main(),g instanceof Promise&&console.warn("The background's main() function return a promise, but it must be synchronous")}catch(e){throw h.error("The background crashed on startup!"),e}return g})();
